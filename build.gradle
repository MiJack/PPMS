/*
 * Copyright 2019 Mi&Jack
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
	gradle 主文件
 */

//
// 引入jar包定义
// 这个文件中定义的jar包可以直接在子项目中使用，不需要再次使用 apply from 这个语句
//
apply from: 'dependency.gradle'

allprojects {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    buildscript {
        repositories {
            maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
            mavenCentral()
        }
    }
}

subprojects { subproj ->
    def springBootVersion = versions.springboot

    def fullName = subproj.name
    def isServer = fullName.endsWith('-service')
    def isApi = fullName.endsWith('-api')


//

    apply plugin: 'java'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    // 用于发布 jar 包到相应服务器
    apply plugin: 'maven'

    // 由于根下屏蔽了 java 插件，所以把这些方法定义转移到各个子项目下读取
    apply from: "${project.rootDir}/utils.gradle"


    group = project_group

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk


    jar {
        excludes = ['**/rebel.xml', '**/.keep']

        doFirst {
            // 生成jar 包的时候按此规则生成 manifest 文件
            manifest = defaultManifest([
                    project      : subproj,
                    projectVendor: project_vendor
            ])
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        doFirst {
            manifest = defaultManifest({ subproj })
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        doFirst {
            manifest = defaultManifest({ subproj })
        }
    }

    // 编码改为 UTF-8, 否则编译源码的时候会出错
    // 当然，这个需要根据自己的 java 源码的编码进行调整
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //
    artifacts {
        archives jar
        // archives javadocJar
        archives sourcesJar
    }

    configurations {

        deployerJars

        //
        // 所有需要忽略的包定义在此
        //
        all*.exclude group: 'commons-httpclient'
        all*.exclude group: 'commons-logging'
        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    dependencies {
        // 用于上传自己项目的jar 包到中心 maven 库
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
        compileOnly 'org.projectlombok:lombok:1.18.8'
        annotationProcessor 'org.projectlombok:lombok:1.18.8'

        if (isServer) {
            // service 项目自动添加api依赖
            def serverName = fullName.substring(0, fullName.length() - "-service".length())
            compile project(":${serverName}-api")
            // 通用依赖
            compile(
                    libraries.'logback-classic',
                    libraries.'jcl-over-slf4j',
                    libraries.'log4j-over-slf4j',
            )
            //
            // 测试依赖
            //
            testCompile(
                    libraries.'junit',
                    libraries.'spring-test',
                    libraries.'assertj',
                    libraries.'mockito-core',
            )
            compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'


            // 引入子项目下的lib文件夹中的包
            compile fileTree(dir: 'libs', include: '**/*.jar')
            // 引入跟目录下的lib文件夹中的包
            compile fileTree(dir: new File(rootProject.rootDir, 'libs'), include: '**/*.jar')


        }
        if (isApi) {
            // service 项目自动添加api依赖
            def serverName = fullName.substring(0, fullName.length() - "-api".length())
            compile project(":api-base")
        }



    }

    // 上传 jar 包到自己的 maven 服务器
    //
    uploadArchives {

        repositories.mavenDeployer {
            //beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            configuration = configurations.deployerJars
            repository(
                    // 这儿需要注意，后面的地址是服务器地址，需要写全，是个大坑啊
                    // 另外初次执行的时候最好带上 --info 参数，会提示保存 ssh 验证信息的
                    // 这时候需要输入 yes
                    //
                    // 更详细说明参见我的 blog: http://my.oschina.net/someok/blog/374562
                    url: //"file://d:/Develop/MyProjects/repos/"
                            "scp://repos.example.com:22/home/maven/repos/release"
            )
                    {
                        // If these are not defined assemble needlessly fails for unrelated tasks, hence, defaultBlank.
                        authentication(userName: "maven", password: "maven")
                    }

        }
    }

}

